#–––– Increase upload limit –––––
options(shiny.maxRequestSize = 600 * 1024^2)

#–––– Packages –––––
library(shiny)
library(data.table)
library(ggplot2)
library(viridis)
library(shinycssloaders)
library(plotly)

#–––– UI –––––
ui <- fluidPage(
  titlePanel("Single-cell Expression Explorer"),
  tabsetPanel(
    tabPanel("Violin Plot",
      sidebarLayout(
        sidebarPanel(
          fileInput("expr",    "Expression matrix (.tsv)", accept = ".tsv"),
          fileInput("meta",    "Metadata (.tsv)",        accept = ".tsv"),
          hr(),
          selectizeInput("genes","Select gene(s):", choices = NULL, multiple = TRUE,
                         options = list(placeholder="Type to search…", maxOptions=100)),
          selectInput("group",    "Group by (required):", choices = NULL),
          selectInput("split_by", "Split by (optional):", choices = NULL)
        ),
        mainPanel(
          withSpinner(plotlyOutput("vlnPlot", width="100%"))
        )
      )
    )
  )
)

#–––– Server –––––
server <- function(input, output, session) {
  
  # 1) Metadata: load once, set key for fast join
  meta_dt <- reactive({
    req(input$meta)
    dt <- fread(input$meta$datapath)
    setnames(dt, names(dt)[1], "cell")
    setkey(dt, "cell")
    dt
  })
  
  # 2) Header row (column names) for expression
  expr_hdr <- reactive({
    req(input$expr)
    names(fread(input$expr$datapath, nrows=0))
  })
  
  # 3) Grep + fread the selected genes (caches until expr file OR genes change)
  dt_genes <- eventReactive(
    list(input$expr, input$genes),
    {
      req(input$expr, input$genes)
      hdr     <- expr_hdr()
      esc     <- gsub("([\\^\\$\\.\\|\\(\\)\\[\\]\\*\\+\\?\\\\])","\\\\\\\\1", input$genes)
      pattern <- paste0("^(", paste(esc, collapse="|"), ")\t")
      cmd     <- paste("grep -E", shQuote(pattern), shQuote(input$expr$datapath))
      dt_s    <- tryCatch(fread(cmd=cmd, header=FALSE, sep="\t"), error=function(e) NULL)
      if (is.null(dt_s) || nrow(dt_s)==0) {
        showNotification("No matching genes found.", type="error")
        return(NULL)
      }
      setnames(dt_s, hdr)
      setnames(dt_s, hdr[1], "gene")
      dt_s
    }
  )
  
  # 4) Melt + join metadata
  dt_long <- reactive({
    dt_s <- dt_genes(); req(dt_s)
    df_long <- melt(dt_s,
      id.vars         = "gene",
      variable.name   = "cell",
      value.name      = "expression",
      variable.factor = FALSE
    )
    meta_dt()[df_long, nomatch=0]
  })
  
  # 5) Update selectors when data arrive
  observeEvent(dt_genes(), {
    genes <- dt_genes()[, unique(gene)]
    updateSelectizeInput(session, "genes",
                         choices  = genes,
                         selected = genes[1],
                         server   = TRUE)
  })
  observeEvent(meta_dt(), {
    cols <- setdiff(names(meta_dt()), "cell")
    updateSelectInput(session, "group",    choices = cols,      selected = cols[1])
    updateSelectInput(session, "split_by", choices = c(None="", cols), selected = "")
  })
  
  # 6) Filter for valid violin densities
  df_big <- reactive({
    df  <- dt_long(); req(df, input$group)
    grp <- input$group; spl <- input$split_by
    df[, group := factor(get(grp))]
    if (nzchar(spl)) df[, split := factor(get(spl))] else df[, split := NULL]
    
    if (nzchar(spl)) {
      keep <- df[, .N, by=.(gene, group, split)][N>=2]
      merge(df, keep, by=c("gene","group","split"))
    } else {
      keep <- df[, .N, by=.(gene, group)][N>=2]
      merge(df, keep, by=c("gene","group"))
    }
  })
  
  # 7) Build the ggplot object
  gg_obj <- reactive({
    dfb <- df_big(); df <- dt_long(); req(dfb)
    n_genes <- length(input$genes)
    ncol_wrap <- if (n_genes<=2) n_genes else 2
    spl <- input$split_by
    
    if (nzchar(spl)) {
      p <- ggplot() +
        geom_violin(data=dfb,
          aes(x=group, y=expression, fill=split, group=interaction(group,split)),
          trim=TRUE, color="black", alpha=0.6
        ) +
        geom_jitter(data=df,
          aes(x=group, y=expression, color=split, group=interaction(group,split)),
          position=position_jitterdodge(dodge.width=0.9,jitter.width=0.15),
          size=0.6, alpha=0.6
        ) +
        scale_fill_viridis_d(name=spl) +
        scale_color_viridis_d(name=spl)
    } else {
      p <- ggplot() +
        geom_violin(data=dfb,
          aes(x=group, y=expression, fill=group, group=group),
          trim=TRUE, color="black", alpha=0.6
        ) +
        geom_jitter(data=df,
          aes(x=group, y=expression, color=group, group=group),
          position=position_jitter(width=0.15),
          size=0.6, alpha=0.6
        ) +
        scale_fill_viridis_d(guide="none") +
        scale_color_viridis_d(guide="none")
    }
    
    p +
      facet_wrap(~ gene, scales="free_y", ncol=ncol_wrap, drop=FALSE) +
      labs(x=NULL, y="Normalized Expression") +
      theme_minimal() +
      theme(
        panel.spacing = unit(1, "cm"),
        axis.text.x   = element_text(angle=45, hjust=1),
        strip.text    = element_text(size=12),
        plot.margin   = margin(10,10,10,10)
      )
  })
  
  # 8) Render Plotly with progress
  output$vlnPlot <- renderPlotly({
    req(input$expr, input$meta, input$genes, input$group)
    
    withProgress(message="Building violin(s)…", value=0, {
      incProgress(0.15, detail="Loading expression lines")
      dt_s <- dt_genes(); req(dt_s)
      
      incProgress(0.25, detail="Melting & joining metadata")
      df   <- dt_long(); req(df)
      
      incProgress(0.20, detail="Filtering for valid violins")
      dfb  <- df_big(); req(dfb)
      
      incProgress(0.25, detail="Creating ggplot object")
      p    <- gg_obj()
      
      incProgress(0.15, detail="Converting to interactive plot")
      ggplotly(p)
    })
  })
}

#–––– Launch App –––––
shinyApp(ui, server)
